/*
* File: internal/conf/conf.go
*
* Description: This file contains the configuration for the application that is loaded from config.yaml.
*              This file is loaded at startup, and the structs in this file get passed to the functions that need
*             configuration data.
 */

package conf

import (
	"io/ioutil"

	"gopkg.in/yaml.v2"
)

/*
* Function: LoadConfig
*
* Parameters: filename string - The name of the file to load the configuration from
*
* Returns: *Config - A pointer to the configuration struct
*
* Description: This function loads the configuration from the file specified by the filename parameter
 */
func LoadConfig(filename string) (*Config, error) {
	data, err := ioutil.ReadFile(filename)
	if err != nil {
		return nil, err
	}

	var config Config
	if err := yaml.Unmarshal(data, &config); err != nil {
		return nil, err
	}

	return &config, nil
}

/*
* Struct: Config
*
* Description: This struct contains all the configuration data for the application, composed of structs for
*              each subsection of the yaml
 */
type Config struct {
	Shortcodes Shortcodes
	Auth       Auth
	Server     Server
	Logging    Logging
	Database   Database
	HCaptcha   HCaptcha
}

/*
* Struct: Auth
*
* Description: This struct contains the configuration data for the authentication system
 */
type Auth struct {
	TLSCert          string `yaml:"tls_cert"`            // Path to the tls certificate
	TLSKey           string `yaml:"tls_key"`             // Path to the tls key
	CookieMaxAgeDays int    `yaml:"cookie_max_age_days"` // The maximum number of days a session should be valid for
	CookieSecret     string `yaml:"cookie_secret"`       // The secret key used to encrypt the cookie store
}

type HCaptcha struct {
	SecretKey string `yaml:"secret_key"` // The secret key for your hCaptcha account
	SiteKey   string `yaml:"site_key"`   // The site key for this application generated by hCaptcha
}

type Server struct {
	Host string `yaml:"host"` // The host to bind the server to
	Port int    `yaml:"port"` // The port to bind the server to
}

type Database struct {
	Path string `yaml:"path"` // The path to the sqlite database file
}

type Shortcodes struct {
	ShortcodeLength int    `yaml:"shortcode_length"`   // The maximum length of any shortcode generated
	Universe        string `yaml:"shortcode_universe"` // The characters allowed in generated shortcodes
}

type Logging struct {
	LogLevel string `yaml:"log_level"` // The log level to output to the log, one of INFO, WARN, ERROR, DEBUG
	LogFile  string `yaml:"log_file"`  // The path of the file to output logging to
}
